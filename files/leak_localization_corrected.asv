% Comprehensive leak detection

clear
close all
clc

load nominal_residuals
load matrix_D.mat

% Define both sensor configurations
configs = {[14, 30], [10, 12]};
config_names = {'Sensors 14 and 30', 'Sensors 10 and 12'};

% Constants

N_NODES = 31;

residual_files = {'hanoi_residuals_f_20.mat', 'hanoi_residuals_f_50.mat'};
residual_names = {'f_20', 'f_50'};

% Alloc
Gamma = cell(2,2); % Confussion matrices
ATD = zeros(2,2);

for i_config = 1:2
    sensor1 = configs{i_config}(1);
    sensor2 = configs{i_config}(2);

    % Residual vectors matrix nxm [delta_r_i/delta_f_i]_j from i=1:n and
    % j=1:m where n is number of nodes and m is number of leaks (n=m)
    Omega = [res_nom(sensor1,:); res_nom(sensor2,:)]; 

    for i_residuals = 1:2
        load(residual_files{i_residuals})

        r1 = squeeze(res_dufu(sensor1,:,:));
        r2 = squeeze(res_dufu(sensor2,:,:));

        n_residuals = length(r1);
        Gamma_current_config = zeros(N_NODES,N_NODES);

        for leak = 1:N_NODES
            for k = 1:n_residuals
                rho = zeros(N_NODES,1);
                for hypothesis = 1:N_NODES
                    rho(hypothesis) = [r1(k,leak), r2(k,leak)] * ...
                    [Omega(1,hypothesis), Omega(2,hypothesis)]' / ...
                    (norm([r1(k,leak), r2(k,leak)]) * norm([Omega(1,hypothesis), ...
                    Omega(2,hypothesis)]));
                end
                [~, winner] = max(rho);
                Gamma_current_config(leak,winner) = Gamma_current_config(leak,winner) + 1;
            end
        end

        Gamma{i_config,i_residuals} = Gamma_current_config;

        ATD_current_config = 0;
        for leak = 1:N_NODES
            for hypothesis = 1:N_NODES
                ATD_current_config = ATD_current_config + Gamma_current_config(leak, hypothesis) * D(leak,hypothesis);
            end
        end
    
        ATD(i_config, i_residuals) = ATD_current_config / (N_NODES*n_residuals);

    end

end

for i_config = 1:2
    for i_residuals = 1:2
        filename = sprintf('confusion_matrix_sensors_%d_%d_%s.csv', ...
            configs{i_config}(1), configs{i_config}(2), residual_names{i_residuals});
        writematrix(Gamma{i_config, i_residuals}, filename);
    end
end

%% Confused

for i_config = 1:2
    for data = 1:2
        fprintf('\n%s:\n', config_names{i_config});
        fprintf('%s:\n', residual_names{data});
        
        Gamma_comp = Gamma{i_config, 1};

       
        total_samples = sum(Gamma_comp, 2); % Total samples per leak
        classification_rate = diag(Gamma_comp) ./ total_samples; % Correct localizations over total guesses
        [sorted_rates, sorted_nodes] = sort(classification_rate);

        fprintf('Most confused leaks (with samples): ');
        for i = 1:min(10, length(sorted_nodes))
            fprintf('Node %d (%.1f%%) ', sorted_nodes(i), sorted_rates(i)*100);
            print('\n')
        end
        fprintf('\n');
    end
end